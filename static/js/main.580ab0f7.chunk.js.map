{"version":3,"sources":["TodoForm.js","TodoList.js","index.js"],"names":["TodoForm","saveTodo","useState","value","setValue","onSubmit","event","preventDefault","TextField","variant","placeholder","inputProps","style","textAlign","width","onChange","target","TodoList","todo","deleteTodo","List","map","index","ListItem","key","toString","dense","button","Checkbox","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","onClick","rootElement","document","getElementById","ReactDOM","render","setTodo","className","AppBar","color","position","Toolbar","height","Typography","component","Box","fontWeight","m","fontSize","todoText","trimmedText","trim","length","todoIndex","newToDos","filter","_"],"mappings":"+OA+BeA,EAzBE,SAAC,GAEjB,IAFmBC,EAEpB,EAFoBA,SAEpB,EAC8BC,mBAAS,IADvC,mBACWC,EADX,KACkBC,EADlB,KAGI,OACI,0BACIC,SAAU,SAAAC,GACNA,EAAMC,iBACNN,EAASE,GACTC,EAAS,MAGb,kBAACI,EAAA,EAAD,CAAWC,QAAQ,WAAWC,YAAY,cACtCC,WAAY,CAAEC,MAAO,CAAEC,UAAW,SAAUC,MAAO,OAEnDC,SAAU,SAAAT,GACNF,EAASE,EAAMU,OAAOb,QAE1BA,MAAOA,M,kECCRc,EAtBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAT,OACb,kBAACC,EAAA,EAAD,KACKF,EAAKG,IAAI,SAACH,EAAMI,GAAP,OACN,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAMG,WAAYC,OAAK,EAACC,QAAM,GAA7C,IAEI,kBAACC,EAAA,EAAD,MAFJ,IAGI,kBAACC,EAAA,EAAD,CAAcC,QAASZ,IACvB,kBAACa,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,aAAW,SACXC,QAAS,WACLf,EAAWG,KAGf,kBAAC,IAAD,a,wCC0BlBa,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBApCJ,WAAO,IAAD,EACUrC,mBAAS,IADnB,mBACPgB,EADO,KACDsB,EADC,KAEd,OACI,yBAAKC,UAAU,OAAf,IACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,YAAYC,SAAS,UAC/B,kBAACC,EAAA,EAAD,CAASjC,MAAO,CAAEkC,OAAQ,KACtB,kBAACC,EAAA,EAAD,CAAYC,UAAU,OAClB,kBAACC,EAAA,EAAD,CAAKC,WAAW,iBAAiBC,EAAG,GAChC,kBAACF,EAAA,EAAD,CAAKG,SAAU,IAAf,yBAQhB,kBAAC,EAAD,CACInD,SAAU,SAAAoD,GACN,IAAMC,EAAcD,EAASE,OAEzBD,EAAYE,OAAS,GACrBhB,EAAQ,GAAD,mBAAKtB,GAAL,CAAWoC,QAI9B,kBAAC,EAAD,CAAUpC,KAAMA,EACZC,WAAY,SAACsC,GACT,IAAMC,EAAWxC,EAAKyC,OAAO,SAACC,EAAGtC,GAAJ,OAAcA,IAAUmC,IACrDjB,EAAQkB,QAQZ,MAASvB,K","file":"static/js/main.580ab0f7.chunk.js","sourcesContent":["//This script will ensure to add functionality to our state\n//Throughout the project we will be using hooks which dictate our current state \n\nimport React, { useState } from 'react' //This is our first hook. It will take the inital state and return an array\nimport { TextField } from '@material-ui/core'\n\nconst TodoForm = ({ saveTodo }) => //arrow expression = compact alternative to a regular function expression ----- =() {} ---- \n//which is used to define a function inside an expression \n{\n    const [value, setValue] = useState('') //Returns a stateful value, and a function to update it.\n    // our first array's index will be the state's current value \n    return (\n        <form\n            onSubmit={event => {\n                event.preventDefault() //this will prevent the user from submitting an item without meeting the recquirements \n                saveTodo(value) //this will save the value we submit \n                setValue('') //this will reset the textfield so the user won't see what they were previously writting \n            }}\n        >\n            <TextField variant=\"outlined\" placeholder=\"Add an item\" // This will add placeholder text so the user knows\n                inputProps={{ style: { textAlign: 'center', width: 1395, } }}\n                // where to instert their text\n                onChange={event => {\n                    setValue(event.target.value) //this will set text in the textfield\n                }}\n                value={value}\n            />\n        </form>\n    );\n}\n\nexport default TodoForm;\n","import React from 'react'\nimport { List, ListItem, ListItemSecondaryAction, ListItemText, Checkbox, IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nconst TodoList = ({ todo, deleteTodo }) => (\n    <List>\n        {todo.map((todo, index) => ( //using a map to map over our items create a list item where we can grab its index point with in the array\n            <ListItem key={index.toString()} dense button> {/*//using a ListItem to display each item within the list*/}\n                {/*//Dense button will allow the item to highlight as the cursor goes over it */}\n                <Checkbox /> {/*include a check box to select items we want to delete */}\n                <ListItemText primary={todo} />\n                <ListItemSecondaryAction>\n                    <IconButton //We can grab an icon button to allow the user to visually remove an item from the list\n                        aria-label=\"Delete\"\n                        onClick={() => { //when the user clicks the icon \n                            deleteTodo(index) //we want to grab the element index in the array and remove that\n                        }}\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>\n        ))}\n    </List>\n)\n\nexport default TodoList;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\nimport './styles.css'\nimport { Typography, AppBar, Toolbar, Box } from '@material-ui/core';\nimport { useState } from 'react' //we need a state for out todo items. \n\n\nconst App = () => {\n    const [todo, setTodo] = useState([]) //This initial state should start as an empty array\n    return (\n        <div className=\"App\"> {/*Grabbing CSS attributes*/}\n            <AppBar color=\"Secondary\" position=\"static\">\n                <Toolbar style={{ height: 60 }}>\n                    <Typography component=\"div\">\n                        <Box fontWeight=\"fontWeightBold\" m={1}>\n                            <Box fontSize={30}>\n                                Nick's To Do List\n                            </Box>\n                        </Box>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n            <TodoForm\n                saveTodo={todoText => {\n                    const trimmedText = todoText.trim();\n\n                    if (trimmedText.length > 0) {\n                        setTodo([...todo, trimmedText]);\n                    }\n                }}\n            />\n            <TodoList todo={todo}\n                deleteTodo={(todoIndex) => {\n                    const newToDos = todo.filter((_, index) => index !== todoIndex)\n                    setTodo(newToDos)\n                }}\n            />\n        </div>\n    )\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}